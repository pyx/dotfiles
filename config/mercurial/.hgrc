[alias]
# changed files
cf = log --template "{label(ifeq(phase, 'public', 'lg.public', ifeq(phase, 'draft', 'lg.draft', ifeq(phase, 'secret', 'lg.secret'))), node|short)} {label('lg.rev', rev)} {label('lg.bookmarks', bookmarks)}:{label('lg.tags', tags)}: {files}\n"
# chronicle view
chronicle = log --template "{label('lg.date', date|shortdate)} {label(ifeq(phase, 'public', 'lg.public', ifeq(phase, 'draft', 'lg.draft', ifeq(phase, 'secret', 'lg.secret'))), node|short)} {label('lg.rev', rev)} {label('lg.bookmarks', bookmarks)}:{label('lg.tags', tags)} ({label('lg.author', author|person)}) - {label('lg.desc', desc|firstline)}\n"
# latest 5
latest = log --limit 5
# better log
lg = log --graph --template "{label(ifeq(phase, 'public', 'lg.public', ifeq(phase, 'draft', 'lg.draft', ifeq(phase, 'secret', 'lg.secret'))), node|short)} {label('lg.rev', rev)} {label('lg.bookmarks', bookmarks)}:{label('lg.tags', tags)} {label('lg.date', date|age)} ({label('lg.author', author|person)}) - {label('lg.desc', desc|firstline)}\n"
# strip-this-from REV
# strip the current branch (in DAG) from REV
strip-this-from = strip -r "first(ancestors(.)-ancestors($1))"
# strip-bookmark BOOKMARK
# strip the branch (in DAG) pointed by BOOKMARK from current checkout branch (in DAG)
# then delete the BOOKMARK
strip-bookmark = !$HG strip -r "first(ancestors($1)-ancestors(.))" && $HG bookmark -d "$1"

[bookmarks]
# mimic git's behavior
#track.current = True

[color]
lg.author = green
lg.bookmarks = bold green
lg.date = blue
lg.draft = bold yellow
lg.public = bold white
lg.rev = cyan
lg.secret = bold black
lg.tags = bold magenta

[diff]
git = True
nodates = True

[email]
method = /usr/bin/msmtp

[extdiff]
# add new command called kdiff3, runs kdiff3
kdiff3 =
# add new command called meld, runs meld
meld =
# add new command called vimdiff, runs vimdiff
vimdiff =
gvimdiff = gvim -df

[extensions]
hgext.bookmarks =
hgext.churn =
hgext.color =
hgext.convert =
hgext.extdiff =
hgext.gpg =
hgext.graphlog =
hgext.highlight =
hgext.histedit =
hgext.mq =
hgext.parentrevspec =
hgext.patchbomb =
hgext.progress =
hgext.purge =
hgext.rebase =
hgext.record =
hgext.relink =
hgext.schemes =
hgext.share =
hgext.shelve =
hgext.transplant =
hggit =
#hgsubversion =

[hooks]
# no longer needed as 2.1, enable secret phase integration instead.
# Prevent "hg pull" if MQ patches are applied.
#prechangegroup.mq-no-pull = ! hg qtop > /dev/null 2>&1
# Prevent "hg push" if MQ patches are applied.
#preoutgoing.mq-no-push = ! hg qtop > /dev/null 2>&1

[merge-tools]
splice.executable = vim
splice.args = $base $local $other $output -c 'SpliceInit'
splice.premerge = keep
splice.priority = 3

gvim.executable = gvim
gvim.args = -f $base $local $other $output -c 'SpliceInit'
gvim.premerge = keep
gvim.gui = True
gvim.priority = 2

kdiff3.args = $base $local $other -o $output
kdiff3.gui = True

[mq]
# For Mercurial >= 2.1
# Enable secret phase integration.
# This integration is off by default for backward compatibility.
secret=true

[phases]
#all new commit can be secret by default
#new-commit=secret
#but this might be better
#hg commit --config phases.new-commit=secret

[ui]
username = Philip Xu <pyx@xrefactor.com>

[web]
#pygments_style = <style>
#pygments_style = fruity
# added as Mercurial 1.7.3 or later requires.
cacerts = /etc/ssl/certs/ca-certificates.crt
